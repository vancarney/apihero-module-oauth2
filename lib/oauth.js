// Generated by CoffeeScript 1.9.3
module.exports = function(app, options) {
  var BasicStrategy, BearerStrategy, ClientPasswordStrategy, crypto, ensureLoggedIn, models, oauth2, oauth2orize, passport;
  ensureLoggedIn = function() {
    return function(req, res, next) {
      if (!(req.session.user && req.session.user.id)) {
        return res.redirect('/login');
      }
      return next();
    };
  };
  oauth2orize = require("oauth2orize");
  passport = require("passport");
  BasicStrategy = require("passport-http").BasicStrategy;
  ClientPasswordStrategy = require("passport-oauth2-client-password").Strategy;
  BearerStrategy = require("passport-http-bearer").Strategy;
  crypto = require("crypto");
  models = require('./models');
  oauth2 = oauth2orize.createServer();
  oauth2.serializeClient(function(client, done) {
    return done(null, client._id);
  });
  oauth2.deserializeClient(function(_id, done) {
    return models.OAuthClientApplication.findById(_id, function(err, client) {
      if (err) {
        return done(err);
      }
      return done(null, client);
    });
  });
  oauth2.grant(oauth2orize.grant.code(function(client, redirectURI, user, ares, done) {
    var ac, code, now;
    now = new Date().getTime();
    code = crypto.createHmac("sha1", "access_token").update([client.id, now].join()).digest("hex");
    ac = new models.OAuthAuthorizationCode({
      code: code,
      client_id: client.id,
      redirect_uri: redirectURI,
      user_id: client.user_id,
      scope: ares.scope
    });
    return ac.save(function(err) {
      if (err) {
        return done(err);
      }
      return done(null, code);
    });
  }));
  oauth2.exchange(oauth2orize.exchange.code(function(client, code, redirectURI, done) {
    return models.OAuthAuthorizationCode.findOne({
      code: code
    }, function(err, code) {
      var at, now, token;
      if (err) {
        return done(err);
      }
      if (client._id.toString() !== code.client_id.toString()) {
        return done(null, false);
      }
      if (redirectURI !== code.redirect_uri) {
        return done(null, false);
      }
      now = new Date().getTime();
      token = crypto.createHmac("sha1", "access_token").update([client._id, now].join()).digest("hex");
      at = new models.OAuthToken({
        oauth_token: token,
        user_id: code.user_id,
        client_id: client._id,
        scope: code.scope
      });
      return at.save(function(err) {
        if (err) {
          return done(err);
        }
        return done(null, token);
      });
    });
  }));
  passport.use(new BasicStrategy(function(username, password, done) {
    return models.OAuthClientApplication.findById(username, function(err, client) {
      if (err) {
        return done(err);
      }
      if (!client) {
        return done(null, false);
      }
      if (client.secret !== password) {
        return done(null, false);
      }
      return done(null, client);
    });
  }));
  passport.use(new ClientPasswordStrategy(function(clientId, clientSecret, done) {
    return models.OAuthClientApplication.findById(clientId, function(err, client) {
      if (err) {
        return done(err);
      }
      if (!client) {
        return done(null, false);
      }
      if (client.secret !== clientSecret) {
        return done(null, false);
      }
      return done(null, client);
    });
  }));
  passport.use(new BearerStrategy(function(accessToken, done) {
    return models.OAuthToken.findOne({
      oauth_token: accessToken
    }, function(err, token) {
      if (err) {
        return done(err);
      }
      if (!token) {
        return done(null, false);
      }
      return app.dataSources[accessDB][accessModel].findById(token.user_id, function(err, user) {
        var info;
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false);
        }
        info = {
          scope: "*"
        };
        return done(null, user, info);
      });
    });
  }));
  app.get("/authorize", ensureLoggedIn(), oauth2.authorization(function(clientID, redirectURI, done) {
    console.log('authorize');
    return models.OAuthClientApplication.findById(clientID, function(err, client) {
      if (err) {
        return done(err);
      }
      if (!client) {
        return done(null, false);
      }
      if (client.redirect_uri !== redirectURI) {
        return done(null, false);
      }
      return done(null, client, redirectURI);
    });
  }), function(req, res) {
    console.log('authorize');
    return res.json({
      transactionID: req.oauth2.transactionID,
      user: req.user,
      client: req.oauth2.client
    });
  });
  app.post("/authorize/decision", ensureLoggedIn(), oauth2.decision());
  return app.post("/token", passport.authenticate(["basic", "oauth2-client-password"], {
    session: false
  }), oauth2.token(), oauth2.errorHandler());
};
