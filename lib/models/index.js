// Generated by CoffeeScript 1.9.3
module.exports = function(app, options) {
  var applicationModel, clients, code, customModels, dataSource, getTTL, loopback, models, oAuthAuthorizationCodeModel, oAuthPermissionModel, oAuthTokenModel, oauth2, permission, token, userModel, users;
  loopback = app.loopback;
  options = options || {};
  dataSource = options.dataSource;
  if (typeof dataSource === 'string') {
    dataSource = app.dataSources[dataSource];
  }
  oauth2 = require('./oauth2-models')(dataSource);
  userModel = loopback.findModel(options.userModel) || loopback.getModelByType(loopback.User);
  applicationModel = loopback.findModel(options.applicationModel) || loopback.getModelByType(loopback.Application);
  oAuthTokenModel = oauth2.OAuthToken;
  oAuthAuthorizationCodeModel = oauth2.OAuthAuthorizationCode;
  oAuthPermissionModel = oauth2.OAuthPermission;
  oAuthTokenModel.belongsTo(userModel, {
    as: 'user',
    foreignKey: 'userId'
  });
  oAuthTokenModel.belongsTo(applicationModel, {
    as: 'application',
    foreignKey: 'appId'
  });
  oAuthAuthorizationCodeModel.belongsTo(userModel, {
    as: 'user',
    foreignKey: 'userId'
  });
  oAuthAuthorizationCodeModel.belongsTo(applicationModel, {
    as: 'application',
    foreignKey: 'appId'
  });
  oAuthPermissionModel.belongsTo(userModel, {
    as: 'user',
    foreignKey: 'userId'
  });
  oAuthPermissionModel.belongsTo(applicationModel, {
    as: 'application',
    foreignKey: 'appId'
  });
  getTTL = typeof options.getTTL === 'function' ? options.getTTL : (function(responseType, clientId, resourceOwner, scopes) {
    if (typeof options.ttl === 'function') {
      return options.ttl(responseType, clientId, resourceOwner, scopes);
    }
    if (typeof options.ttl === 'number') {
      return options.ttl;
    }
    if (typeof options.ttl === 'object' && options.ttl !== null) {
      return options.ttl[responseType];
    }
    switch (responseType) {
      case 'code':
        return 300;
      default:
        return 14 * 24 * 3600;
    }
  });
  users = {};
  users.find = function(id, done) {
    userModel.findOne({
      where: {
        id: id
      }
    }, done);
  };
  users.findByUsername = function(username, done) {
    userModel.findOne({
      where: {
        username: username
      }
    }, done);
  };
  users.findByUsernameOrEmail = function(usernameOrEmail, done) {
    userModel.findOne({
      where: {
        or: [
          {
            username: usernameOrEmail
          }, {
            email: usernameOrEmail
          }
        ]
      }
    }, done);
  };
  users.save = function(id, username, password, done) {
    userModel.create({
      id: id,
      username: username,
      password: password
    }, done);
  };
  clients = {};
  clients.find = clients.findByClientId = function(clientId, done) {
    applicationModel.findById(clientId, done);
  };
  token = {};
  token.find = function(accessToken, done) {
    oAuthTokenModel.findOne({
      where: {
        id: accessToken
      }
    }, done);
  };
  token.findByRefreshToken = function(refreshToken, done) {
    oAuthTokenModel.findOne({
      where: {
        refreshToken: refreshToken
      }
    }, done);
  };
  token["delete"] = function(clientId, token, tokenType, done) {
    var where;
    where = {
      appId: clientId
    };
    if (tokenType === 'access_token') {
      where.id = token;
    } else {
      where.refreshToken = token;
    }
    oAuthTokenModel.destroyAll(where, done);
  };
  token.save = function(token, clientId, resourceOwner, scopes, refreshToken, done) {
    var tokenObj, ttl;
    tokenObj = void 0;
    if (arguments.length === 2 && typeof token === 'object') {
      tokenObj = token;
      done = clientId;
    }
    ttl = getTTL('token', clientId, resourceOwner, scopes);
    if (!tokenObj) {
      tokenObj = {
        id: token,
        appId: clientId,
        userId: resourceOwner,
        scopes: scopes,
        issuedAt: new Date,
        expiresIn: ttl,
        refreshToken: refreshToken
      };
    }
    tokenObj.expiresIn = ttl;
    tokenObj.issuedAt = new Date;
    tokenObj.expiredAt = new Date(tokenObj.issuedAt.getTime() + ttl * 1000);
    oAuthTokenModel.create(tokenObj, done);
  };
  code = {};
  code.findByCode = code.find = function(key, done) {
    oAuthAuthorizationCodeModel.findOne({
      where: {
        id: key
      }
    }, done);
  };
  code["delete"] = function(id, done) {
    oAuthAuthorizationCodeModel.destroyById(id, done);
  };
  code.save = function(code, clientId, redirectURI, resourceOwner, scopes, done) {
    var codeObj, ttl;
    codeObj = void 0;
    if (arguments.length === 2 && typeof token === 'object') {
      codeObj = code;
      done = clientId;
    }
    ttl = getTTL('code', clientId, resourceOwner, scopes);
    if (!codeObj) {
      codeObj = {
        id: code,
        appId: clientId,
        userId: resourceOwner,
        scopes: scopes,
        redirectURI: redirectURI
      };
    }
    codeObj.expiresIn = ttl;
    codeObj.issuedAt = new Date;
    codeObj.expiredAt = new Date(codeObj.issuedAt.getTime() + ttl * 1000);
    oAuthAuthorizationCodeModel.create(codeObj, done);
  };
  permission = {};
  permission.find = function(appId, userId, done) {
    oAuthPermissionModel.findOne({
      where: {
        appId: appId,
        userId: userId
      }
    }, done);
  };

  /*
   * Check if a client app is authorized by the user
   */
  permission.isAuthorized = function(appId, userId, scopes, done) {
    permission.find(appId, userId, function(err, perm) {
      var info, ok;
      if (err) {
        return done(err);
      }
      if (!perm) {
        return done(null, false);
      }
      ok = helpers.isScopeAuthorized(scopes, perm.scopes);
      info = ok ? {
        authorized: true
      } : {};
      return done(null, ok, info);
    });
  };
  permission.addPermission = function(appId, userId, scopes, done) {
    oAuthPermissionModel.findOrCreate({
      where: {
        appId: appId,
        userId: userId
      }
    }, {
      appId: appId,
      userId: userId,
      scopes: scopes,
      issuedAt: new Date
    }, function(err, perm, created) {
      if (created) {
        return done(err, perm, created);
      } else {
        if (helpers.isScopeAuthorized(scopes, perm.scopes)) {
          return done(err, perm);
        } else {
          perm.updateAttributes({
            scopes: helpers.normalizeList(scopes)
          }, done);
        }
      }
    });
  };
  customModels = options.models || {};
  models = {
    users: customModels.users || users,
    clients: customModels.clients || clients,
    accessTokens: customModels.accessTokens || token,
    authorizationCodes: customModels.authorizationCodes || code,
    permissions: customModels.permission || permission
  };
  return models;
};
